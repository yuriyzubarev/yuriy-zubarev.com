---
layout: post
title: CAS "branded" Authentication Filter
---
Seemingly complex tasks can have surprisingly easy resolutions. All is needed is not trying to make things more complex than they are.

We have two domain names for two distinct categories of customers: <strong>www.example1.com</strong> and <strong>www.example2.com</strong>. These domains point to the very same Web application - Super Widgets 2.0. The application has to redirect new visitors to CAS log-in page. Super Widgets 2.0 provides "<strong>service</strong>" (or "<strong>serverName</strong>", please read on) parameter to CAS so that CAS can redirect users back to Super Widgets 2.0 after a successful authentication. "<strong>service</strong>" parameter comes from <strong>web.xml</strong> of Super Widgets 2.0 and it's a constant value as far as <a href="http://www.ja-sig.org/wiki/display/CASC/Configuring+the+JA-SIG+CAS+Client+for+Java+in+the+web.xml">CAS Client</a> is concerned. So the "<strong>service</strong>" value can either be <strong>http://www.example1.com</strong> or <strong>http://www.example2.com</strong>. When it comes to CAS, it knows where to redirect users after the authentication but it doesn't know the original URL users tried to access (CAS Client doesn't pass Referer HTTP header).

On CAS log-in page we would have to know the original URL so that we could greet users with either "Welcome to Example 1" or "Welcome to Example 2" messages (can be easily achieved with a simple JSP scriplet).

In the nutshell the solution (suggested by my colleague Alexey Malyshev) is to initialize and call <strong>org.jasig.cas.client.authentication.AuthenticationFilter</strong> from within our own custom filter. As we initialize Jasig's AuthenticationFilter we calculate "<strong>service</strong>" value dynamically based on the value of <strong>request.getServerName()</strong>. I'm not really sure what design pattern should be selected form the <a href="http://www.answers.com/main/ntquery?s=software+design+patterns&gwp=13#Classification_and_list">list</a> to describe this approach.

First, we need a custom but simple implementation of <strong>FilterConfig</strong>:

[sourcecode lang="java"]
package com.superwidgets;

...
import javax.servlet.FilterConfig;
import javax.servlet.ServletContext;

public class BrandingFilterConfig implements FilterConfig {

  private FilterConfig parent;

  private Map<String, String> params = new HashMap<String, String>();

  public BrandingFilterConfig(FilterConfig parent) {
    this.parent = parent;
  }

  public String getFilterName() {
    return "Super Widgets Branded Filter";
  }

  public ServletContext getServletContext() {
    return this.parent.getServletContext();
  }

  public String getInitParameter(String s) {
    if (this.params.containsKey(s)) {
      return this.params.get(s);
    } else {
      return this.parent.getInitParameter(s);
    }
  }

  public Enumeration getInitParameterNames() {
    return this.parent.getInitParameterNames();
  }

  public void setParam(String key, String value) {
    params.put(key, value);
  }

  public void removeParam(String key) {
    params.remove(key);
  }

}
[/sourcecode]

Second, we need to implement our own <strong>Authentication Filter</strong>:

[sourcecode lang="java"]
package com.superwidgets;

import javax.servlet.Filter;
...

public class AuthenticationFilter implements Filter {

  protected final Log log = LogFactory.getLog(getClass());

  private String serviceMapping;

  private Properties serviceProperties = new Properties();

  private String serverNameMapping;

  private Properties serverNameProperties = new Properties();

  private BrandingFilterConfig filterConfig;

  public String getServiceMapping() {
    return serviceMapping;
  }

  public void setServiceMapping(String serviceMapping) {
    this.serviceMapping = serviceMapping;
  }

  public void init(FilterConfig fc) throws ServletException {
    this.filterConfig = new BrandingFilterConfig(fc);

    // service

    this.serviceMapping = fc.getInitParameter("serviceMapping");
    log.info("serviceMapping = " + this.serviceMapping);

    try {
      if (this.serviceMapping != null) {
        this.serviceProperties.load(new ByteArrayInputStream(this.serviceMapping.getBytes()));
      }
    } catch (Exception ex) {
      log.error("Cannot load serviceMapping property: " + ex.getMessage());
    }

    log.info("serviceProperties = " + this.serviceProperties);

    // serverName

    this.serverNameMapping = fc.getInitParameter("serverNameMapping");
    log.info("serverNameMapping = " + this.serverNameMapping);

    try {
      if (this.serverNameMapping != null) {
        this.serverNameProperties.load(new ByteArrayInputStream(this.serverNameMapping.getBytes()));
      }
    } catch (Exception ex) {
      log.error("Cannot load serverNameMapping property: " + ex.getMessage());
    }

    log.info("serverNameProperties = " + this.serverNameProperties);
  }

  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
    org.jasig.cas.client.authentication.AuthenticationFilter realFilter = new org.jasig.cas.client.authentication.AuthenticationFilter();

    String hostKey = request.getServerName();
    log.debug("hostKey = " + hostKey);

    if (serviceMapping != null) {
      if (serviceProperties.containsKey(hostKey)) {
        this.filterConfig.setParam("service", serviceProperties.getProperty(hostKey));
      } else {
        this.filterConfig.removeParam("service");
      }
    }

    if (serverNameMapping != null) {
      if (serverNameProperties.containsKey(hostKey)) {
        this.filterConfig.setParam("serverName", serverNameProperties.getProperty(hostKey));
      } else {
        this.filterConfig.removeParam("serverName");
      }
    }

    realFilter.init(this.filterConfig);
    realFilter.doFilter(request, response, chain);
    realFilter.destroy();
  }

  public void destroy() {
    // nothing to do
  }

  public Properties getServiceProperties() {
    return serviceProperties;
  }

  public Properties getServerNameProperties() {
    return serverNameProperties;
  }
}
[/sourcecode]

Now we have to modify <strong>web.xml</strong> and everything falls into places:

[sourcecode lang="xml"]
---
<filter>
  <filter-name>CAS Authentication Filter</filter-name>
  <filter-class>com.superwidgets.AuthenticationFilter</filter-class>
  <init-param>
    <param-name>casServerLoginUrl</param-name>
    <param-value>https://cas.superwidgets.com/login</param-value>
  </init-param>
  <init-param>
    <param-name>service</param-name>
    <param-value>http://www.example1.com</param-value>
  </init-param>
  <init-param>
    <!-- new -->
    <param-name>serviceMapping</param-name>
    <param-value>
      www.example2.com=http://www.example2.com
      www.example3.com=http://www.example3.com
      www.example4.com=http://www.example4.com
    </param-value>
  </init-param>
</filter>
---
[/sourcecode]

"<strong>serviceMapping</strong>" is a secret sauce here. The value is loaded in an instance of <strong>java.util.Properties</strong> class and then it's used to dynamically calculate "<strong>service</strong>" value for Jasig's AuthenticationFilter.

If AuthenticationFilter is using "<strong>serverName</strong>" parameter instead of "<strong>service</strong>", then instead of "<strong>serviceMapping</strong>" parameter, "<strong>serverNameMapping</strong>" should be used.

A little summary. AuthenticationFilter has a dynamic behavior based on the original URL a user was trying to access. To achieve this we wrapped Jasig's filter inside our own filter and we didn't have to change Jasig's filter internals in any way. Jasig's AuthenticationFilter filter is initialized on every request and this has a light and acceptable (for us) performance implication. 
