---
layout: post
title: 97 Things Every Software Architect Should Know
---
This is a Twitter of a book: 97 short but precise and relevant advices for software architects. Many advices may not address all of your concerns on particular topics and leave you only half-satisfied. Please don't fall into this trap! This book is not meant to be the main architecture book in your bookshelf with answers on all the questions. For me personally, reading "97 Things" was like looking into a mirror. I recollected doing some things right and other things wrong in the past; I saw myself making a good progress in one areas and luck of sufficient advancements in another ones. The book helped me to do a quick check of my skills and classify my experiences that I almost forgot. What more, it added more oil to the fire of wanting to keep learning and practicing software architecture.

Overall, I would definitely recommend the book but only as a desert to a main course of classical books on software architecture. I would also like to provide some suggestions for improvements for the format.

<ul>
<li>Advices from giants of software architecture are noticeably missing. If you had to collect 97 pearls of wisdom, wouldn't you ask what Grady Booch, Philippe Kruchten and John A. Zachman, for example, have to say?</li>
<li>Many advices convey the same point using a slightly different language. Because all the advices are not grouped in any way, the repetition doesn't seem to accentuate the point but rather appears as a filler. Offending topics are
<ul>
<li>Architect is a coder as well</li>
<li>Data is a king</li>
<li>Don't over-engineer</li>
<li>Don't leave your soft skills undeveloped</li>
<li>Architect is a leader</li>
</ul>
</li>
</ul>


